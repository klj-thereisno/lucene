package com.javing.lucene;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.IntPoint;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.BooleanClause.Occur;
import org.apache.lucene.search.BooleanQuery.Builder;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.search.highlight.Formatter;
import org.apache.lucene.search.highlight.Fragmenter;
import org.apache.lucene.search.highlight.Highlighter;
import org.apache.lucene.search.highlight.QueryScorer;
import org.apache.lucene.search.highlight.SimpleHTMLFormatter;
import org.apache.lucene.search.highlight.SimpleSpanFragmenter;
import org.apache.lucene.store.FSDirectory;

public class IndexBlog {

	public static void main(String[] args) throws Exception{
		List<Blog> blogList = new  ArrayList<Blog>();
		IndexReader reader = null;
		String str = "技术";
		// File f = new File(PropertiesUtil.getKey("indexPathWindow"));
		File f = new File("/index");
		if(f.list().length > 1){
			reader = DirectoryReader.open(FSDirectory.open(f.toPath()));
			IndexSearcher searcher = new IndexSearcher(reader);
			Analyzer ana = new SmartChineseAnalyzer();
			Query q1 = new QueryParser("title", ana).parse(str);
			Query q2 = new QueryParser("content", ana).parse(str);
			// Query q3 = new QueryParser("state", ana).parse("1");
			// TermQuery q3 = new TermQuery(new Term("state", "1"));
			// PrefixQuery q3 = new PrefixQuery(new Term("state", "open"));
			Query q3 = IntPoint.newExactQuery("state", 1);
			Builder builder = new Builder();
			builder.add(q1, Occur.SHOULD);
			builder.add(q2, Occur.SHOULD);
			builder.add(q3, Occur.MUST);
			Query q = builder.build();
			QueryScorer scorer = new QueryScorer(q);
			Fragmenter frag = new SimpleSpanFragmenter(scorer);
			Formatter formatter = new SimpleHTMLFormatter("<b><span style='color:red'>", "</span></b>");
			Highlighter lighter = new Highlighter(formatter, scorer);
			lighter.setTextFragmenter(frag);
			TopDocs tops = searcher.search(q, 50);
			for(ScoreDoc sd : tops.scoreDocs){
				Document doc = searcher.doc(sd.doc);
				Blog b = new Blog();
				System.out.println("score" + sd.score);
				String title = doc.get("title");
				String hTitle = lighter.getBestFragment(ana, "title", title);
				if(hTitle == null)
					b.setTitle(title);
				else
					b.setTitle(hTitle);
				String content = doc.get("content");
				String hContent = lighter.getBestFragment(ana, "content", content);
				if(hContent == null)
					if(content.length() > 200)
						b.setContent(content.substring(0, 200));
					else
						b.setContent(content);
				else
					b.setContent(hContent);
				b.setId(doc.get("id"));
				b.setPublishDate(new SimpleDateFormat("yyyy-MM-dd").parse(doc.get("publishDate")));
				blogList.add(b);
			}
			System.out.println(tops.scoreDocs.length + "个");
			reader.close();
		}
	}
}
